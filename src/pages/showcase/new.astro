---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro'
import { LibsqlError } from '@libsql/client'

import FormErrors from '../../components/FormErrors.astro'
import FormField from '../../components/FormField.astro'
import { newShowcaseEntrySchema } from '../../libs/schema'
import { addShowcaseEntry } from '../../libs/showcase'

export const prerender = false

if (!Astro.locals.user) {
  return Astro.redirect('/showcase/login/')
}

const formErrors: Record<string, { errors: string[]; value: string | null }> = {}

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData()
    const parsedNewEntry = newShowcaseEntrySchema.safeParse(data)

    if (parsedNewEntry.success) {
      await addShowcaseEntry(Astro.locals.user, parsedNewEntry.data.url, parsedNewEntry.data.name)
    } else {
      for (const [field, errors] of Object.entries(parsedNewEntry.error.flatten().fieldErrors)) {
        const value = data.get(field)
        formErrors[field] = { errors, value: typeof value === 'string' ? value : null }
      }
    }

    // TODO(HiDeoo) redirect
  } catch (error) {
    let message = 'Something went wrong. Please try again later.'

    if (error instanceof LibsqlError && error.code === 'SQLITE_CONSTRAINT_UNIQUE') {
      message = 'This showcase entry already exists.'
    } else {
      console.error('Failed to submit new showcase entry', error)
    }

    formErrors['submit'] = { errors: [message], value: null }
  }
}
---

<StarlightPage frontmatter={{ title: '// TODO(HiDeoo) ', tableOfContents: false }}>
  <FormErrors errors={formErrors.submit?.errors} />
  <form method="post">
    <FormField fieldErrors={formErrors.url} label="URL" name="url" placeholder="// TODO(HiDeoo) " required type="url" />
    <FormField
      fieldErrors={formErrors.name}
      label="Name"
      name="name"
      placeholder="// TODO(HiDeoo) "
      required
      type="text"
    />
    <button type="submit">Submit</button>
  </form>
</StarlightPage>
